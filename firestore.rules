rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is admin
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.email in [
          'dabasrianto@gmail.com'
        ] || 
        request.auth.token.admin == true
      );
    }
    
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Settings collection - Public read for pricing, admin write
    match /settings/{settingId} {
      // Anyone can read pricing settings (for landing page)
      allow read: if true;
      
      // Only admin can write settings
      allow write: if isAdmin();
      
      // Allow creation of settings if they don't exist
      allow create: if isAdmin();
    }
    
    // Pricing collection - Public read, admin write
    match /pricing/{planId} {
      // Anyone can read pricing plans (for landing page and user dashboard)
      allow read: if true;
      
      // Only admin can write pricing
      allow write: if isAdmin();
      
      // Allow creation of pricing plans
      allow create: if isAdmin();
    }
    
    // Users collection - Admin can read all, users can read/write their own
    match /users/{userId} {
      // Admin can read all user documents
      allow read: if isAdmin();
      
      // Users can read and write their own profile
      allow read, write: if isOwner(userId);
      
      // Admin can update any user (for subscription management)
      allow write: if isAdmin();
      
      // Allow user creation during signup
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Students subcollection
      match /students/{studentId} {
        allow read, write: if isOwner(userId);
        allow read: if isAdmin(); // Admin can read all students
      }
      
      // Pengujis subcollection  
      match /pengujis/{pengujiId} {
        allow read, write: if isOwner(userId);
        allow read: if isAdmin(); // Admin can read all pengujis
      }
    }
    
    // Subscriptions collection - Users can read their own, admin can read/write all
    match /subscriptions/{subscriptionId} {
      // Users can read their own subscription data
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Admin can read and write all subscriptions
      allow read, write: if isAdmin();
      
      // Allow subscription creation for authenticated users
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      // Users can update their own subscription (for upgrade requests)
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Upgrade Requests collection - Users can create their own, admin can read/write all
    match /upgradeRequests/{requestId} {
      // Users can create upgrade requests for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      // Users can read their own upgrade requests
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Admin can read and write all upgrade requests
      allow read, write: if isAdmin();
    }
    
    // Payments collection - Admin only
    match /payments/{paymentId} {
      // Only admin can read and write payments
      allow read, write: if isAdmin();
      
      // Users can read their own payment records
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Admin Logs collection - Admin only
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Admin-only collections (if needed in future)
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // System logs (admin only)
    match /logs/{logId} {
      allow read, write: if isAdmin();
    }
  }
}
