rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to settings and pricing for all users (needed for landing page)
    match /settings/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /pricing/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin();
    }

    // Students collection - users can manage their own students
    match /students/{studentId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/students/$(studentId)).data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if isAdmin();
    }

    // Teachers/Penguji collection - users can manage their own teachers
    match /teachers/{teacherId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/teachers/$(teacherId)).data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if isAdmin();
    }

    // Progress collection - users can manage progress for their students
    match /progress/{progressId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.userId);
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }

    // Setoran collection - users can manage setoran for their students  
    match /setoran/{setoranId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.userId);
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }

    // Subscriptions collection - users can read their own subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if isAdmin();
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Upgrade requests - users can create, admins can manage
    match /upgradeRequests/{requestId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }

    // Admin collections - admin only
    match /admin/{document} {
      allow read, write: if isAdmin();
    }

    match /logs/{document} {
      allow read, write: if isAdmin();
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
